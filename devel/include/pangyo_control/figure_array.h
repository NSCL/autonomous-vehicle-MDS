// Generated by gencpp from file pangyo_control/figure_array.msg
// DO NOT EDIT!


#ifndef PANGYO_CONTROL_MESSAGE_FIGURE_ARRAY_H
#define PANGYO_CONTROL_MESSAGE_FIGURE_ARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pangyo_control/figure.h>

namespace pangyo_control
{
template <class ContainerAllocator>
struct figure_array_
{
  typedef figure_array_<ContainerAllocator> Type;

  figure_array_()
    : figure_array()  {
    }
  figure_array_(const ContainerAllocator& _alloc)
    : figure_array(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::pangyo_control::figure_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pangyo_control::figure_<ContainerAllocator> >::other >  _figure_array_type;
  _figure_array_type figure_array;





  typedef boost::shared_ptr< ::pangyo_control::figure_array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pangyo_control::figure_array_<ContainerAllocator> const> ConstPtr;

}; // struct figure_array_

typedef ::pangyo_control::figure_array_<std::allocator<void> > figure_array;

typedef boost::shared_ptr< ::pangyo_control::figure_array > figure_arrayPtr;
typedef boost::shared_ptr< ::pangyo_control::figure_array const> figure_arrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pangyo_control::figure_array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pangyo_control::figure_array_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pangyo_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'HasHeader': False, 'IsFixedSize': False, 'IsMessage': True}
// {'pangyo_control': ['/home/choiys/stauto_ws/src/stauto_sensor/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct HasHeader< ::pangyo_control::figure_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pangyo_control::figure_array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pangyo_control::figure_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pangyo_control::figure_array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pangyo_control::figure_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pangyo_control::figure_array_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pangyo_control::figure_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51ba417e9d022c3e94d411dca3690368";
  }

  static const char* value(const ::pangyo_control::figure_array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51ba417e9d022c3eULL;
  static const uint64_t static_value2 = 0x94d411dca3690368ULL;
};

template<class ContainerAllocator>
struct DataType< ::pangyo_control::figure_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pangyo_control/figure_array";
  }

  static const char* value(const ::pangyo_control::figure_array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pangyo_control::figure_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pangyo_control/figure[] figure_array\n\
\n\
================================================================================\n\
MSG: pangyo_control/figure\n\
int32[] figure\n\
";
  }

  static const char* value(const ::pangyo_control::figure_array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pangyo_control::figure_array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.figure_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct figure_array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pangyo_control::figure_array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pangyo_control::figure_array_<ContainerAllocator>& v)
  {
    s << indent << "figure_array[]" << std::endl;
    for (size_t i = 0; i < v.figure_array.size(); ++i)
    {
      s << indent << "  figure_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pangyo_control::figure_<ContainerAllocator> >::stream(s, indent + "    ", v.figure_array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANGYO_CONTROL_MESSAGE_FIGURE_ARRAY_H
