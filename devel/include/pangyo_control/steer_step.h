// Generated by gencpp from file pangyo_control/steer_step.msg
// DO NOT EDIT!


#ifndef PANGYO_CONTROL_MESSAGE_STEER_STEP_H
#define PANGYO_CONTROL_MESSAGE_STEER_STEP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pangyo_control
{
template <class ContainerAllocator>
struct steer_step_
{
  typedef steer_step_<ContainerAllocator> Type;

  steer_step_()
    : steer(0.0)
    , step(0)  {
    }
  steer_step_(const ContainerAllocator& _alloc)
    : steer(0.0)
    , step(0)  {
  (void)_alloc;
    }



   typedef float _steer_type;
  _steer_type steer;

   typedef uint16_t _step_type;
  _step_type step;





  typedef boost::shared_ptr< ::pangyo_control::steer_step_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pangyo_control::steer_step_<ContainerAllocator> const> ConstPtr;

}; // struct steer_step_

typedef ::pangyo_control::steer_step_<std::allocator<void> > steer_step;

typedef boost::shared_ptr< ::pangyo_control::steer_step > steer_stepPtr;
typedef boost::shared_ptr< ::pangyo_control::steer_step const> steer_stepConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pangyo_control::steer_step_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pangyo_control::steer_step_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pangyo_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'pangyo_control': ['/home/choiys/stauto_ws/src/stauto_sensor/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pangyo_control::steer_step_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pangyo_control::steer_step_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pangyo_control::steer_step_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pangyo_control::steer_step_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pangyo_control::steer_step_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pangyo_control::steer_step_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pangyo_control::steer_step_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d57c21a8b6c47635ef292bfcd70e3721";
  }

  static const char* value(const ::pangyo_control::steer_step_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd57c21a8b6c47635ULL;
  static const uint64_t static_value2 = 0xef292bfcd70e3721ULL;
};

template<class ContainerAllocator>
struct DataType< ::pangyo_control::steer_step_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pangyo_control/steer_step";
  }

  static const char* value(const ::pangyo_control::steer_step_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pangyo_control::steer_step_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 steer\n\
uint16 step\n\
";
  }

  static const char* value(const ::pangyo_control::steer_step_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pangyo_control::steer_step_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.steer);
      stream.next(m.step);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct steer_step_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pangyo_control::steer_step_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pangyo_control::steer_step_<ContainerAllocator>& v)
  {
    s << indent << "steer: ";
    Printer<float>::stream(s, indent + "  ", v.steer);
    s << indent << "step: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.step);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANGYO_CONTROL_MESSAGE_STEER_STEP_H
