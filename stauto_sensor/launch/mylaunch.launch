
<launch>

  <param name="/use_sim_time" value="false" />

  <node pkg="tf" type="static_transform_publisher" name="map_tf" args="0 0 0 0 0 0 world /map 100" />
  <node pkg="tf" type="static_transform_publisher" name="base_tf" args="0 0 0 0 0 0 world odom/gps 100" />
  <node pkg="tf" type="static_transform_publisher" name="basefoot_tf" args="0 0 0 0 0 0 base_link base_footprint 100" />
  <!-- <node pkg="tf" type="static_transform_publisher" name="GPS_tf" args="0 0 0 0 0 0 map GPS_link 100" /> -->
  

  <node pkg="gps_common" type="utm_odometry_to_navsatfix_node" name="utm_odometry_node" clear_params="true"/>
  

  <node pkg="gps_common" type="utm_odometry_node" name="gps_path_odom" output="screen">
		<remap from="/gps/fix" to="fix" />
	</node>

  <node pkg="hypharos_minicar" type="Pure_Pursuit" name="get_pure_pursuit" output="screen">
		<remap from="pure_pursuit/odom" to="/odom/gps" />
	</node>

  <node pkg="stauto_sensor" type="gps_path.py" name="create_gps_path" output="screen">
		<remap from="/gps/fix" to="fix" />
		<remap from="/path" to="/pure_pursuit/global_planner" />
	</node>

  

  <!-- Car urdf -->

  <arg name="model" default="$(find robot_description)/urdf/platform_base_allink.urdf"/>

  <param name="robot_description" command="$(find xacro)/xacro --inorder $(arg model)" />

  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />

  <!-- map -->

  <!-- <arg name="map_file" default="/home/rnd/catkin_ws/map.yaml"/> -->

  <!-- <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" /> -->

  <!-- <node name="get_gps_node" pkg="stauto_sensor" type="get_gps_data"/> -->

  <!-- <node type="rviz" name="rviz" pkg="rviz" args="-d /home/rnd/.rviz/default.rviz" /> -->

</launch>

